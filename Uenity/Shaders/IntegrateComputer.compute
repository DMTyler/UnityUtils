// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define PI 3.14159265359

Texture2D<float4> Data;
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Schlick's approximation
inline float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

inline float VanDerCorpus(uint n, uint base)
{
    float invBase = 1.0 / float(base);
    float denom   = 1.0;
    float result  = 0.0;
    for(uint i = 0u; i < 32u; ++i)
    {
        if (n > 0u)
        {
            denom = fmod(float(n), 2.0);
            result += denom * invBase;
            invBase = invBase / 2.0;
            n = uint(float(n) / 2.0);
        }
    }
    return result;
}

inline float2 Hammersley(uint i, uint base)
{
    #ifdef USE_BIT_MANIPULATION
    return float2(float(i) / float(base), RadicalInverse_VdC(i));
    #else
    return float2((i) / float(base), VanDerCorpus(i, 2u));
    #endif
}

inline float Geometry_IBL_SchlickGGX(float NdotV,  float roughness)
{
    float k = (roughness * roughness) / 2;
    float denom = NdotV * (1 - k) + k;
    return NdotV / denom;
}

inline float Geometry_IBL_Smith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0);
    float NdotL = max(dot(N, L), 0);
    float ggx2 = Geometry_IBL_SchlickGGX(NdotV, roughness);
    float ggx1 = Geometry_IBL_SchlickGGX(NdotL, roughness);
    return ggx1 * ggx2;
}

inline float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness; // note that this is squared in order to get better visual results
    float phi = 2 * PI * Xi.x;
    float cosTheta = sqrt((1 - Xi.y) / (1 + (a * a - 1) * Xi.y));
    float sinTheta = sqrt(1 - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    float3 up = abs(N.z) < 0.999 ? float3(0, 0, 1) : float3(1, 0, 0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

inline float2 IntegrateBRDF(float3 NdotV, float roughness)
{
    float3 V;
    V.x = sqrt(1 - NdotV * NdotV);
    V.y = 0;
    V.z = NdotV;

    float scale = 0; // Integral1
    float bias = 0; // Integral2
    const uint SAMPLE_COUNT = 1024u;
    const float3 N = float3(0, 0, 1);
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, roughness);
        float3 L = 2 * dot(V, H) * H - V;

        float NdotL = max(L.z, 0);
        float NdotH = max(H.z, 0);
        float VdotH = max(dot(V, H), 0);
        
        if (NdotL > 0)
        {
            float G = Geometry_IBL_Smith(N, V, L, roughness);
            float G_Vis = G * VdotH / (NdotH * NdotV + 1e-4f);
            float Fc = pow(1 - VdotH, 5);
            
            scale += (1 - Fc) * G_Vis;
            bias += Fc * G_Vis;
        }
    }

    scale = scale / float(SAMPLE_COUNT);
    bias = bias / float(SAMPLE_COUNT);
    
    return float2(scale, bias);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float NoV = Data[id.xy].r;
    float roughness = Data[id.xy].g;
    float2 integrate = IntegrateBRDF(NoV, roughness);
    float4 color = float4(integrate, 0, 1);
    Result[id.xy] = color;
}
